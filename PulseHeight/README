The PulseHeight directory contrains all the necessary scripts to produce a number of different plots which
correspond to the pulse height study. (Also, the plots from Paul's pulse height studies in 2016 are in the
Plots2016/ directory.)

1) Produce the gain calibration files which are required to run the PulsHeight code. 
   Just run the following bash script
                
                  ./gainCalFastFits.sh


2) The PulseHeights_new.cc script takes as an input a Fill and a gain calibration file and 
   plots the charge distribution as an output. It is important that the pixels with bad fit
   results should be masked. To implement it, the code reads the fit result of every individual
   pixel in the fiducial region and mask (ignores) those with bad fits. The fit information is
   contained in the rootfiles which can be produced by the following command:

                ./GainCalFastFits_modified.cc gaincalfast_<timestamp>.avg_Err.txt


3) If you want to reproduce the pulse height over integrated luminosity plots for the selected Run-2
   data, you just have to run:

                ./PulseHeights.sh

   All the necessary information (fills, gaincal files etc) is hardcoded.
   Then, you just have to run:
            
                ./plotPeaks.cc

   and the plot will have been generated.


   Otherwise, if you want to select a different fill and plot the pulse height, you can just run:

                ./PulseHeights_new.cc  [Slink data] [gaincal file] [Fill]

  The 3rd argument has been added in order to assign the fill number to the corresponding produce histogram
  which is then stored in the rootfile. This is just a method to automate the process and be able to run
  multiple fills with the bash script. 

###############################################################################################################

The script pulse_height_tests.cc is just a modified version of the original, which is used for two simple tests:
  1) compare the charge distribution which correspond to events only from leading bunches with the distribution
     which corresponds to events only from the next non colliding BX after each bunch train. Also, the standard
     charge distribution is overlayed with the latter just for comparison.

     To implement this test you have to run the following:

                       ./FindLeadingBX.cc [Slink file]

                       ./printNonCollidingBunchAfterEachTrain.py [Fill number]
     
     These will generate two csv files with the BX numbers. Then, the pulse_height_tests.cc script reads the 2
     csv and generate the plot.
                       ./pulse_height_tests.cc [Slink file] [gain cal file]

 
 2) Verify that the pulse height is stable with time over a Fill. You can run over a whole fill and every 1 hour
    (~12M events) the charge distribution is estimated. The final plot contains a number of overlaid histograms
    which correspond to each individual Pulse Height. Furthermore, one extra plot, which shows the histogram peak
    over time, is generated.
  
